//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player_Basic"",
            ""id"": ""b0cd9e8b-a56e-4c16-ab11-aad7758be914"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""41e2df27-3f59-4520-b3cd-2268e8638f16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""161a3725-597a-476d-8d3f-bd778c102cf2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""cd1d80b1-8797-4db5-a6c4-75cc3b68aeac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""8f16326c-95ba-4a58-8942-1dd509e722a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8bc428f6-2966-492a-b5f4-0ad94ad24e82"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c617ba8e-7442-45bd-bce0-cc73492e5433"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1302073-5ec5-4730-a6c8-e15ffe5668fb"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ec0f8e9-fdd9-4c1e-8687-ea3fc66f8abc"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector - Keyboard"",
                    ""id"": ""cff17825-09af-409a-8cd3-e1cb791673ad"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0d7a88dd-6d3e-4f48-a56d-030178c3eb62"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""433a90c2-af0b-4b99-b368-ee1c30b342c3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""94421319-17b8-4de3-8d84-2b4f6439f68d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""afec4e46-e56d-49ec-aa23-9cad93f20e3d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector - GamePad"",
                    ""id"": ""2e584bd3-d5b4-483e-b1d3-43343618731d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a8fbd6b5-44a1-4a82-9cad-430e0028464e"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7bf202ba-623f-447d-97b2-9b0fc55d9a32"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5e6f1ee7-0a44-44cc-940f-5ca09e746ba0"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ed3d0631-4e80-4daa-901f-23186ec794dc"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7350eeed-a892-4a2d-b084-18d3bf8b186f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": ""Hold(duration=1)"",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_Swipe"",
            ""id"": ""905bcde7-6d2f-4b46-8e37-157b394c9079"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8b1ceb3a-f5a3-40fb-a725-764c14f325ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""850019b5-ed7c-4620-bc97-63e52b673b1a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""1281229a-8241-4756-8f97-d4307986dcd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a36c7e49-c16a-4cb5-92e8-c5f345928020"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""711a4e7a-cd3b-4c33-bca7-04d34543ba22"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b52d5c56-fc56-49ae-8a97-9c6e5c8c284b"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""TouchScreen"",
            ""bindingGroup"": ""TouchScreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player_Basic
        m_Player_Basic = asset.FindActionMap("Player_Basic", throwIfNotFound: true);
        m_Player_Basic_Jump = m_Player_Basic.FindAction("Jump", throwIfNotFound: true);
        m_Player_Basic_Move = m_Player_Basic.FindAction("Move", throwIfNotFound: true);
        m_Player_Basic_Attack = m_Player_Basic.FindAction("Attack", throwIfNotFound: true);
        m_Player_Basic_Reset = m_Player_Basic.FindAction("Reset", throwIfNotFound: true);
        // Player_Swipe
        m_Player_Swipe = asset.FindActionMap("Player_Swipe", throwIfNotFound: true);
        m_Player_Swipe_PrimaryContact = m_Player_Swipe.FindAction("PrimaryContact", throwIfNotFound: true);
        m_Player_Swipe_PrimaryPosition = m_Player_Swipe.FindAction("PrimaryPosition", throwIfNotFound: true);
        m_Player_Swipe_Tap = m_Player_Swipe.FindAction("Tap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Basic
    private readonly InputActionMap m_Player_Basic;
    private IPlayer_BasicActions m_Player_BasicActionsCallbackInterface;
    private readonly InputAction m_Player_Basic_Jump;
    private readonly InputAction m_Player_Basic_Move;
    private readonly InputAction m_Player_Basic_Attack;
    private readonly InputAction m_Player_Basic_Reset;
    public struct Player_BasicActions
    {
        private @PlayerInputActions m_Wrapper;
        public Player_BasicActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_Basic_Jump;
        public InputAction @Move => m_Wrapper.m_Player_Basic_Move;
        public InputAction @Attack => m_Wrapper.m_Player_Basic_Attack;
        public InputAction @Reset => m_Wrapper.m_Player_Basic_Reset;
        public InputActionMap Get() { return m_Wrapper.m_Player_Basic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_BasicActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_BasicActions instance)
        {
            if (m_Wrapper.m_Player_BasicActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnMove;
                @Attack.started -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnAttack;
                @Reset.started -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_Player_BasicActionsCallbackInterface.OnReset;
            }
            m_Wrapper.m_Player_BasicActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
            }
        }
    }
    public Player_BasicActions @Player_Basic => new Player_BasicActions(this);

    // Player_Swipe
    private readonly InputActionMap m_Player_Swipe;
    private IPlayer_SwipeActions m_Player_SwipeActionsCallbackInterface;
    private readonly InputAction m_Player_Swipe_PrimaryContact;
    private readonly InputAction m_Player_Swipe_PrimaryPosition;
    private readonly InputAction m_Player_Swipe_Tap;
    public struct Player_SwipeActions
    {
        private @PlayerInputActions m_Wrapper;
        public Player_SwipeActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryContact => m_Wrapper.m_Player_Swipe_PrimaryContact;
        public InputAction @PrimaryPosition => m_Wrapper.m_Player_Swipe_PrimaryPosition;
        public InputAction @Tap => m_Wrapper.m_Player_Swipe_Tap;
        public InputActionMap Get() { return m_Wrapper.m_Player_Swipe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_SwipeActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_SwipeActions instance)
        {
            if (m_Wrapper.m_Player_SwipeActionsCallbackInterface != null)
            {
                @PrimaryContact.started -= m_Wrapper.m_Player_SwipeActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.performed -= m_Wrapper.m_Player_SwipeActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.canceled -= m_Wrapper.m_Player_SwipeActionsCallbackInterface.OnPrimaryContact;
                @PrimaryPosition.started -= m_Wrapper.m_Player_SwipeActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.performed -= m_Wrapper.m_Player_SwipeActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.canceled -= m_Wrapper.m_Player_SwipeActionsCallbackInterface.OnPrimaryPosition;
                @Tap.started -= m_Wrapper.m_Player_SwipeActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_Player_SwipeActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_Player_SwipeActionsCallbackInterface.OnTap;
            }
            m_Wrapper.m_Player_SwipeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
            }
        }
    }
    public Player_SwipeActions @Player_Swipe => new Player_SwipeActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamePadSchemeIndex = -1;
    public InputControlScheme GamePadScheme
    {
        get
        {
            if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
            return asset.controlSchemes[m_GamePadSchemeIndex];
        }
    }
    private int m_TouchScreenSchemeIndex = -1;
    public InputControlScheme TouchScreenScheme
    {
        get
        {
            if (m_TouchScreenSchemeIndex == -1) m_TouchScreenSchemeIndex = asset.FindControlSchemeIndex("TouchScreen");
            return asset.controlSchemes[m_TouchScreenSchemeIndex];
        }
    }
    public interface IPlayer_BasicActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
    public interface IPlayer_SwipeActions
    {
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
        void OnTap(InputAction.CallbackContext context);
    }
}
